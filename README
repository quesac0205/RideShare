# 🚗 RideShare – A C++ Ride Matching Simulation
**Designer:** Sachin Bansal  
A C++ object-oriented simulation of an Uber-like ride-sharing system, complete with driver-customer matching, map visualization, and location-based logic.

## 📘 Overview
RideShare is a city-based simulation that maintains two separate lists: **Drivers** and **Customers**, each having their own location. Customers can request rides, and the system automatically matches them to the nearest eligible driver based on vehicle capacity and driver rating.

The simulation also includes a visual map view where:
- Customers appear inside buildings  
- Drivers appear on roads  


## 🗂️ Directory Structure
├── a/ # Compiled output
├── Controller.{cc,h}
├── Customer.{cc,h}
├── Driver.{cc,h}
├── Drawable.{cc,h}
├── Location.{cc,h}
├── RideShare.{cc,h}
├── User.{cc,h}
├── View.{cc,h}
├── List.h # Custom linked list class
├── defs.h # Definitions and constants
├── main.cc
├── Makefile
└── README


## ⚙️ How to Build and Run
Make sure you're using the **linux based provided VM** with the correct `g++` compiler.

### ▶️ Build the Executable
```bash make

### ▶️ Run the Program
bash ./a

##🧹 Clean Build Files
To remove all compiled object files and the executable:
bash make clean

##🧠 Key Features
🚕 Dynamic ride-matching based on location, vehicle size, and rating
🏙️ Map visualization with separate drawing logic for drivers and customers
👥 Multiple dispatch for flexible draw operations
✅ Full memory mgmt with clean heap usage and proper deallocation


##✅ Memory Leak Check (Valgrind Output)
== HEAP SUMMARY ==
In use at exit: 0 bytes in 0 blocks  
Total heap usage: 66 allocs, 66 frees, 97,242 bytes allocated  
All heap blocks were freed – no memory leaks possible ✔



##💡 Concepts Demonstrated
Object-Oriented Programming in C++
Visitor Pattern & Multiple Dispatch
Dynamic memory management with custom lists
Command-line simulation & interactive logic
Unit testing with Valgrind validation


##📬 Contact
Feel free to reach out at SachinBansal@cmail.carleton.ca

